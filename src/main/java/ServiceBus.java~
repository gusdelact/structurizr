import com.structurizr.Workspace;
import com.structurizr.api.StructurizrClient;
import com.structurizr.documentation.*;
import com.structurizr.model.*;
import com.structurizr.view.*;
import java.util.*;

/**
 * A "getting started" example that illustrates how to
 * create a software architecture diagram using code.
 *
 * The live workspace is available to view at https://structurizr.com/share/25441
 */
public class ServiceBus {

    private static final long WORKSPACE_ID = 38549;
    private static final String API_KEY = "fa603ed4-775b-44e6-9d69-5ee8518d881b";
    private static final String API_SECRET = "44e200f6-b14f-420a-a1c3-715c2c70bf1b";

    private static final String MICROSERVICE_TAG = "Microservice";
    private static final String MESSAGE_BUS_TAG = "Message Bus";
    private static final String EXISTING_SYSTEM_TAG = "Existing System";
    private static final String STAFF_TAG = "Staff";
    private static final String DATABASE_TAG = "Database";
    public Model model;
 


    public static void main(String[] args) throws Exception {
        // Workspace
	
	    Workspace workspace = new Workspace("Getting Started", "This is a model of my software system.");
       Model model = workspace.getModel();
	ViewSet views = workspace.getViews();



        Workspace workspaceMonolitico = new Monolitico().create();
        Workspace workspaceClienteServidor = new ClienteServidor().create();
        Workspace workspaceMulticapa = new Multicapa().create();
        Workspace workspaceMicroservicios = new Microservicios().create();
        	
	
	//workspaceMonolitico.getViews().getSystemLandscapeViews().stream().forEach(c -> views.createSystemLandscapeView(c.getKey(), c.getDescription()));

	//workspaceMonolitico.getViews().getSystemContextViews().stream().forEach(c -> views.createSystemContextView(c.getSoftwareSystem(), c.getKey(), c.getDescription()));
	//workspaceMonolitico.getViews().getComponentViews().stream().forEach(c -> views.createComponentView(c.getContainer(), c.getKey(), c.getDescription()));
	
	//workspaceMonolitico.getViews().getContainerViews().stream().forEach(c -> views.createContainerView(c.getSoftwareSystem(), c.getKey(), c.getDescription()));

	//SystemLandscapeView systemView = views.createSystemLandscapeView("Sistema", "");
//        systemView.addAllElements();


	// Elements


        model = updateModel(model, workspaceMonolitico.getModel());
        model = updateModel(model, workspaceClienteServidor.getModel());



  //views.setModel(workspaceMonolitico.getModel());
//  	SystemLandscapeView systemView = views.createSystemLandscapeView("Sistema", "");
  //      systemView.addAllElements();


        SystemContextView contextView = views.createSystemContextView(model.getSoftwareSystemWithName("Sistema Cliente Servidor"), "ClienteServidor Context", "");
        contextView.addAllElements();


	ContainerView clienteContainerView = views.createContainerView(model.getSoftwareSystemWithName("Sistema Cliente Servidor"), "Cliente Container", "");
	clienteContainerView.addAllElements();
	
//	ComponentView clienteComponentView = views.createComponentView(cliente, "Cliente Component", "");
//	clienteComponentView.addAllElements();
	
//	ComponentView servidorComponentView = views.createComponentView(servidor, "Servidor Component", "");
//	servidorComponentView.addAllElements();
	



	
       	uploadWorkspaceToStructurizr(workspace);
    }

 

    private static void uploadWorkspaceToStructurizr(Workspace workspace) throws Exception {
        StructurizrClient structurizrClient = new StructurizrClient(API_KEY, API_SECRET);
        structurizrClient.putWorkspace(WORKSPACE_ID, workspace);
    }

    private static Model updateModel (Model oldModel, Model newModel){

      Collection<Person> people = new LinkedHashSet<>();
      Set<SoftwareSystem> softwareSystems = new LinkedHashSet<>();

      people = newModel.getPeople();
      softwareSystems = newModel.getSoftwareSystems();

      for (SoftwareSystem softwareSystem : softwareSystems) {
        SoftwareSystem tmpSoftwareSystem = oldModel.addSoftwareSystem(softwareSystem.getName(), softwareSystem.getDescription());
        for (Container container : softwareSystem.getContainers()) {

          Container tmpContainer = tmpSoftwareSystem.addContainer(container.getName(), container.getDescription(),"");

          for (Component component : container.getComponents()) {

            tmpContainer.addComponent(component.getName(), component.getDescription(), "");

          }
        }
      }
      return oldModel;
    }

    private static ViewSet updateViews (ViewSet oldView, ViewSet newView) {

    }

}
